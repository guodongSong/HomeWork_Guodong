varying vec4 diffuse, ambient;
varying vec3 normal, lightDir,halfVector;
varying float nhigh;
varying float triadZ;
varying float triadX;
varying vec4 vposition;
varying vec2 TexCoord;
uniform sampler2D tex;
uniform float maxh;
uniform float minh;
uniform float LightFactor;
uniform vec3 LightPosition;

varying vec3 voutN;
varying vec3 voutL;
varying vec3 voutV;
uniform vec3 diffuse_albedo;
uniform vec3 specular_albedo;
uniform float specular_power;
uniform float shading_level;

#define resolution vec2(1.0,1.0)
#define Thickness 0.03
//绘制线
float drawLine(vec2 p1, vec2 p2, vec2 coord)
{
	//获取纹理坐标
	vec2 uv = coord.xy / resolution.xy;
	//计算是否属于线中一点
	float a = abs(distance(p1, uv));
	float b = abs(distance(p2, uv));
	float c = abs(distance(p1, p2));
	if( a >= c || b >= c) return 0.0;
	
	//计算是否属于线宽范围内一点
	float p = (a + b + c) * 0.5;
	float h = 2 / c * sqrt(p * (p - a) * (p - b) * (p - c));
	return mix(1.0, 0.0, smoothstep(0.5 * Thickness, 1.5 * Thickness, h));
}

//伪随机数
float PRandom(vec2 pd)
{
	float pr = -0.25 + 0.5 * fract(sin(dot(pd, vec2(45.9876, 27.5342))) * 65981.9573);
	return pr;
}

void main(void)
{ 
	//计算法线
    vec3 N = normalize(voutN);
    vec3 L = normalize(voutL);
    vec3 V = normalize(voutV);
    vec3 R = reflect(-L, N);
	//输出法线及深度至缓存1
    gl_FragData[1] = vec4(N, voutV.z);

	//计算法线、聚光对当前颜色影响
    vec3 n, halfV;
    float NdotL,NdotHV; 
    vec4 LightColor = ambient * 8.0;
	vec3 vViewPosition = vposition.xyz;
    n = normalize(normal);
    vec3 vDir = normalize(LightPosition - vViewPosition);
    LightColor.rgb += diffuse.rgb * saturate(dot(vDir, n.xyz));
    
	//计算高程颜色
    float h, w, vtemp;  				
    w =  TexCoord.s; 
    maxh = 1.0;
    minh = -2.0;
    if( nhigh > maxh)
    {
    	vtemp = 1.0;
    }
    else if( nhigh < minh )
    {
    	vtemp = 0.0;
    }
    else
    {
    	vtemp = (nhigh - minh) / abs(maxh - minh);       
    }
    vec2 TempCoord;
    TempCoord.t = 0.0;
    TempCoord.s = vtemp;
    vec4 tex_color = texture2D(tex, TempCoord.st);
	
	//遍历10条随机线
	 float ableLine = 0.0;
	 for(int i = 0; i < 10; i++)
	{
		if(ableLine != 0.0) break;
		ableLine = drawLine(vec2(PRandom(vec2(i,i-1)) * 100.0,PRandom(vec2(i,i-2)) * 100.0), vec2(PRandom(vec2(i,i-3)) * 100.0,PRandom(vec2(i,i-4)) * 100.0),vec2(triadX,triadZ));
	}
		
	//绘制
	 if(ableLine != 0.0)
	 {
		//属于线中点，加重亮度
		gl_FragData[0] = LightColor *  tex_color * 1.5 * ableLine;//LightColor *  tex_color * LightFactor * 2.5 * ableLine;//
	 }
	 else
	 {
		//不属于线中点
		gl_FragData[0] = LightColor * tex_color;//LightColor * tex_color * LightFactor;
	 }

}