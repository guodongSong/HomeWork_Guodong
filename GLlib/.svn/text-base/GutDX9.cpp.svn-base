//#define STRICT
#include <windows.h>
#include <D3D9.h>
#include <D3DX9.h>
#include <stdio.h>

#include "GutWin32.h"
#include "GutDX9.h"

static LPDIRECT3D9 g_pD3D = NULL;
static LPDIRECT3DDEVICE9 g_pD3DDevice = NULL;

// 直接傳回已經初始化好的Direct3D 9裝置
LPDIRECT3DDEVICE9 GutGetGraphicsDeviceDX9(void)
{
	return g_pD3DDevice;
}

// Direct3D 9 初使化.
bool GutInitGraphicsDeviceDX9(void)
{
	// 開啟視窗時就已取得這個用來代表視窗的指標, 直接拿來使用.
	HWND hWnd = GutGetWindowHandleWin32();

	// 取得一個D3D9物件, 它的唯一功用是去開啟真正可以拿來繪圖的D3D9 Device.
    if( NULL == ( g_pD3D = Direct3DCreate9( D3D_SDK_VERSION ) ) )
        return false;

    D3DPRESENT_PARAMETERS d3dpp; 
    ZeroMemory( &d3dpp, sizeof(d3dpp) );
    d3dpp.Windowed = TRUE;
    d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
    d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;
	d3dpp.EnableAutoDepthStencil = TRUE;
	d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;

	bool device_initialized = false;

	// 試著用4種不同方法來開啟d3d9
	// 1. D3DDEVTYPE_HAL + D3DCREATE_HARDWARE_VERTEXPROCESSING = 100%由GPU處理
	// 2. D3DDEVTYPE_HAL + D3DCREATE_MIXED_VERTEXPROCESSING	= Vertex可由CPU或GPU來處理, 其它是GPU	
	// 3. D3DDEVTYPE_HAL + D3DCREATE_SOFTWARE_VERTEXPROCESSING = Vertex是CPU, 其它是GPU
	// 4. D3DDEVTYPE_REF + D3DCREATE_SOFTWARE_VERTEXPROCESSING = 完全由CPU處理, 這是個非常慢的模式

	const int device_types = 4;
	
	struct sDeviceType
	{
		D3DDEVTYPE type;
		DWORD behavior;
	};

	sDeviceType device_type[device_types] = 
	{
		{D3DDEVTYPE_HAL, D3DCREATE_HARDWARE_VERTEXPROCESSING},
		{D3DDEVTYPE_HAL, D3DCREATE_MIXED_VERTEXPROCESSING},
		{D3DDEVTYPE_HAL, D3DCREATE_SOFTWARE_VERTEXPROCESSING},
		{D3DDEVTYPE_REF, D3DCREATE_SOFTWARE_VERTEXPROCESSING}
	};

	for ( int type=0; type<device_types; type++ )
	{
		// 試著去開啟一個Direct3D 9 裝置
		if( g_pD3D->CreateDevice( D3DADAPTER_DEFAULT, device_type[type].type, hWnd,
								  device_type[type].behavior,
								  &d3dpp, &g_pD3DDevice )==D3D_OK )
		{
			device_initialized = true;
			break;
		}
	}

    return device_initialized;
}

bool GutReleaseGraphicsDeviceDX9(void)
{
	if ( g_pD3DDevice )
	{
		g_pD3DDevice->Release();
		g_pD3DDevice = NULL;
	}

	if ( g_pD3D )
	{
		g_pD3D->Release();
		g_pD3D = NULL;
	}
	
	return true;
}

// 載入Vertex Shader
// file = HLSL shader file
// entry = vertx shader entry point
// profile = shader version
LPDIRECT3DVERTEXSHADER9 GutLoadVertexShaderDX9_HLSL(const char *filename, const char *entry, const char *profile)
{
	LPD3DXBUFFER pShader = NULL;
	LPD3DXBUFFER pErrorMsg = NULL;
	DWORD flags = 0;
#ifdef _DEBUG
	flags |= D3DXSHADER_DEBUG;
#endif

	HRESULT result = D3DXCompileShaderFromFile(
		filename,
		NULL,
		NULL,
		entry,
		profile,
		flags,
		&pShader,
		&pErrorMsg,
		NULL
		);
	
	if ( result != S_OK )
	{
		if ( pErrorMsg )
		{
			printf("%s\n", pErrorMsg->GetBufferPointer() );
			pErrorMsg->Release();
		}
	}

	LPDIRECT3DVERTEXSHADER9 pVertexShader = NULL;
	result = g_pD3DDevice->CreateVertexShader( (DWORD*)pShader->GetBufferPointer(), &pVertexShader);
	if ( result!=S_OK )
	{
		printf("Failed to load vertex shader %s\n", filename);	
	}
	
	pShader->Release();

	return pVertexShader;
}

// 載入Pixel Shader
// file = HLSL shader file
// entry = pixel shader entry point
// profile = shader version
LPDIRECT3DPIXELSHADER9  GutLoadPixelShaderDX9_HLSL(const char *filename, const char *entry, const char *profile)
{
	LPD3DXBUFFER pShader = NULL;
	LPD3DXBUFFER pErrorMsg = NULL;
	DWORD flags = 0;
#ifdef _DEBUG
	flags |= D3DXSHADER_DEBUG;
#endif

	HRESULT result = D3DXCompileShaderFromFile(
		filename,
		NULL,
		NULL,
		entry,
		profile,
		flags,
		&pShader,
		&pErrorMsg,
		NULL
		);
	
	if ( result != S_OK )
	{
		if ( pErrorMsg )
		{
			printf("%s\n", pErrorMsg->GetBufferPointer() );
			pErrorMsg->Release();
		}
	}

	LPDIRECT3DPIXELSHADER9 pPixelShader = NULL;
	result = g_pD3DDevice->CreatePixelShader( (DWORD*)pShader->GetBufferPointer(), &pPixelShader);
	if ( result!=S_OK )
	{
		printf("Failed to load pixel shader %s\n", filename);	
	}
	
	pShader->Release();

	return pPixelShader;
}

LPDIRECT3DVERTEXSHADER9 GutLoadVertexShaderDX9_Binary(const char *filename)
{
	return NULL;
}

LPDIRECT3DPIXELSHADER9  GutLoadPixelShaderDX9_Binary(const char *filename)
{
	return NULL;
}