#ifndef _GUTIL_
#define _GUTIL_

#include <windows.h>
#include <GL/gl.h>
#include <d3d9.h>

#include "GutDX9.h"
#include "GutDX10.h"
#include "GutOpenGL.h"

#include "Vector4.h"
#include "Matrix4x4.h"

#define SAFE_RELEASE(x) if (x) { x->Release(); x=NULL; }

enum GutEnum
{
	GUT_UNKNOWN = 1,
	GUT_OPENGL,
	GUT_DX9,
	GUT_DX10
};

struct GutCallBack
{
	void (*OnSize)(int x, int y);
	void (*OnPaint)(void);
	void (*OnIdle)(void);
	void (*OnClose)(void);

	GutCallBack(void);
};

extern GutCallBack g_GutCallBack;

void GutGetMouseState(int &x, int &y, int button[3]);
bool  GutCreateWindow(int x, int y, int width, int height, const char *title = "Gut Application");
void GutEnterMessageLoop(void);
bool GutProcessMessage(void);
void GutResizeFunc(  void (*resize)(int x, int y) );
void GutDisplayFunc( void (*onpaint)(void) );
void GutIdleFunc( void (*onidle)(void) );
void GutOnCloseFunc( void (*onclose)(void) );
bool GutInitGraphicsDevice(const char *device);
bool GutReleaseGraphicsDevice(void);

GutEnum GutGetGraphicsDeviceType(const char *device = NULL);

Matrix4x4 GutMatrixLookAt_DirectX(Vector4 &eye, Vector4 &lookat, Vector4 &up);
Matrix4x4 GutMatrixOrtho_DirectX(float w, float h, float z_near, float z_far);
Matrix4x4 GutMatrixPerspective_DirectX(float fovy, float aspect, float z_near, float z_far);

Matrix4x4 GutMatrixLookAtRH_DirectX(Vector4 &eye, Vector4 &lookat, Vector4 &up);
Matrix4x4 GutMatrixOrthoRH_DirectX(float w, float h, float z_near, float z_far);
Matrix4x4 GutMatrixPerspectiveRH_DirectX(float fovy, float aspect, float z_near, float z_far);

Matrix4x4 GutMatrixLookAt_OpenGL(Vector4 &eye, Vector4 &lookat, Vector4 &up);
Matrix4x4 GutMatrixOrtho_OpenGL(float w, float h, float z_near, float z_far);
Matrix4x4 GutMatrixPerspective_OpenGL(float fovy, float aspect, float z_near, float z_far);

#endif // _GUTIL_